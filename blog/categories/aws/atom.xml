<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aws | Reinaldo Junior]]></title>
  <link href="http://blog.reinaldojunior.net/blog/categories/aws/atom.xml" rel="self"/>
  <link href="http://blog.reinaldojunior.net/"/>
  <updated>2013-03-07T12:41:56-03:00</updated>
  <id>http://blog.reinaldojunior.net/</id>
  <author>
    <name><![CDATA[Reinaldo Junior]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating your own AMI]]></title>
    <link href="http://blog.reinaldojunior.net/2013/03/05/creating-your-own-ami/"/>
    <updated>2013-03-05T17:46:00-03:00</updated>
    <id>http://blog.reinaldojunior.net/2013/03/05/creating-your-own-ami</id>
    <content type="html"><![CDATA[<p><strong>Disclaimer: this blog post is a DRAFT</strong></p>

<h2>Objective</h2>

<p>Create a custom (and minimal) Centos 5.x instance store-backed AMI with
a traditional Amazon AKI/AMI (no PVGrub).</p>

<h2>Context</h2>

<p>In order to launch a new machine, a user must choose a specific AMI (Amazon
Machine Image).</p>

<p>An AMI contains all information necessary to boot an Amazon EC2 instance with
your software. An AMI is like a template of a computer's root volume.</p>

<p>Even though there is a lot of AMIs available (both publicly and privately),
often you just can't find any that fits your needs (or you just can't
trust what is shipped with the AMI).</p>

<p>Therefore, Amazon provides a way of creating (and distributing) your own AMIs,
giving you full control of what should be installed and running in your instance.</p>

<h2>Background</h2>

<p>In order to create a custom AMI you have to know a little about how it
work, what are the options available to be chosen and how to do it.</p>

<h3>The boot proccess</h3>

<p>Amazon EC2 is built on a Xen-based solution.
In order to launch a virtual machine (instance in EC2 nomenclature, domU in Xen
nomenclature) the Xen hypervisor needs some information about how to find the
proper kernel to boot, how to load it, and so on. This information is provided
by a set of shared files available in the EC2 infrastructure:</p>

<ul>
<li><p>An AKI (Amazon Kernel Image) is the Xen guest paravirtualized kernel used by an AMI.<br/>
It represents the <a href="http://en.wikipedia.org/wiki/Vmlinux">vmlinuz</a> portion of the kernel. It is basically the compiled
kernel that gets loaded on boot.</p></li>
<li><p>An ARI (Amazon Ramdisk Image) is the Xen guest paravirtualized ramdisk used by an AMI.<br/>
It represents the <a href="http://en.wikipedia.org/wiki/Initrd">initrd</a>/initramfs. It is the ramdisk that gets loaded with
the kernel and has the initial driver modules for the kernel to find the root
filesystem.</p></li>
</ul>


<p>When an AMI is built, it is designed for a specific AKI (and ARI).
Regarding the boot proccess, there are two ways of building an AMI:</p>

<ol>
<li>Using an AKI (and a corresponding ARI)</li>
<li>Using a PVGrub-based AKI (and no ARI)</li>
</ol>


<p>In the beginning of EC2, the only way to build an AMI was to use an AKI
(and a matching ARI) to boot the instance.</p>

<p>As from (date missing), EC2 started to support the use of PVGrub-based AKIs.
These AKIs simulate grub as the kernel and allow you to install your kernel on the
AMI and have it perform similar to bare-metal system where it reads the kernel
and ramdisk from the filesystem. These PVGrub AKIs do not use ARIs.</p>

<h3>Other AMI characteristics</h3>

<p>Besides the boot-specific setting you must craft your AMI according to the following characteristics:</p>

<p><strong>Root device volume</strong><br/>
Can be either <code>instance store</code> or <code>ebs</code>.
An <code>instance store</code> AMI can only launch <em>instance store-backed</em> instances
and an <code>ebs</code> AMI can only launch <em>ebs-backed</em> instances.</p>

<p><strong>Architecture</strong><br/>
Can be either <code>i386</code> (32-bits) or <code>x86_64</code> (64-bits).</p>

<h2>Building the AMI</h2>

<p>1) Launch a host instance on EC2
  - It will be easier and faster
2) Install the basic tollset
3) Get the kernel module matching the AKI/ARI
4) Install basic stuff
5) Bundle and publish</p>

<h3>Resources on the interwebs</h3>

<p>https://forums.aws.amazon.com/message.jspa?messageID=256534
https://help.ubuntu.com/community/EC2FAQ
http://openfoo.org/blog/amazon_ec2_underlying_architecture.html</p>

<p>http://en.wikipedia.org/wiki/Xen
http://en.wikipedia.org/wiki/Hypervisor</p>

<p>http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/RootDeviceStorage.html
http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html</p>
]]></content>
  </entry>
  
</feed>
