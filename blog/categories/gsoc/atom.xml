<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gsoc | Reinaldo Junior]]></title>
  <link href="http://blog.reinaldojunior.net/blog/categories/gsoc/atom.xml" rel="self"/>
  <link href="http://blog.reinaldojunior.net/"/>
  <updated>2013-02-24T07:01:26-03:00</updated>
  <id>http://blog.reinaldojunior.net/</id>
  <author>
    <name><![CDATA[Reinaldo Junior]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Playing with Droid]]></title>
    <link href="http://blog.reinaldojunior.net/2011/07/04/playing-with-droid/"/>
    <updated>2011-07-04T00:00:00-03:00</updated>
    <id>http://blog.reinaldojunior.net/2011/07/04/playing-with-droid</id>
    <content type="html"><![CDATA[<div class='post'>
During the last weeks I've been working on the Droid DSL. Now I'm proud to announce that it is working!<br /><br />Since the <a href="http://blog.reinaldojunior.net/2011/05/droid-dsl.html">last blog post</a>, the DSL had changed. In order to simplify the DSL some concepts have been removed, for example, ImageButton, Link and ImageLink. These concepts are still available at the Button concept, so a Button with and "src" property is a ImageButton and a Button with a "target" property is a "Link".<br /><br />Another significant change in the DSL is the merging of the Activity and Layout concepts in a single concept: Screen (although the layout concept is still existing). This made easier to write a simple application. The screen's widgets can now be placed inside the screen (you don't need anymore to create a layout to put the widgets and set the activity to show the created layout).<br /><br />So what used to be the simplest Droid example:<br /><pre>application "Hello, Android!" com.example.android.hellodroid {<br /><br /> string hello = "Hello, Android! I am a string resource!"<br /><br /> activity HelloDroid {<br />  =&gt; show main<br /> }<br /><br /> layout main {<br />  textView: @string hello<br /> }<br />}<br /></pre><br />Now is even simpler:<br /><pre>application "Hello, Android!" =&gt; com.example.android.hellodroid {<br /><br /> string hello = "Hello, Android! I am a string resource!"<br /><br /> screen HelloDroid {<br />  # textView: @string hello<br /> }<br />}<br /></pre><br />In order to play with the Droid DSL, you need to install some plugins:<br /><ol><li>Install the ADT Eclipse plugin. The target of the DSL is creating Android applications, so you must to install the ADT. The Android <a href="http://developer.android.com/resources/tutorials/hello-world.html">Hello World</a> tutorial is all you need to have your environment ready to the work.</li><li>Install the Droid plugins, located at this Update Site:&nbsp;<a href="http://reinaldojunior.net/eclipse-amalgamation-tutorials/">http://reinaldojunior.net/eclipse-amalgamation-tutorials/</a></li></ol><h3>Creating your first Droid Project</h3>A Droid project is an Eclipse Android Project that has automatic code generation from a droid model. The droid model is inferred from a .droid file (a textual representation of the model).<br /><br />To create a Droid project you must to:<br /><ol><li>Create an Android Project (following the instructions at the Hello World tutorial)</li><li>Create a '<i>model</i>'&nbsp;folder&nbsp;inside the project</li><li>Create a '<i>src-gen</i>' folder inside the project</li><li>Right-click the '<i>src-gen</i>' folder and select "Build Path" &gt; "Use as source folder"</li><li>You can delete the content of the '<i>src</i>' folder as it will have a generated Activity stub.</li></ol><div>Now you are ready to start playing with the Droid DSL.&nbsp;Inside&nbsp;the '<i>model</i>' folder, create a .droid file and open it. The file will be opened with the DSL textual editor (generated with&nbsp;Xtext).</div><div><br /></div><div>You can use this sample code to test your environment:</div><pre>application "SimpleWizard" =&gt; org.eclipse.amalgam.tutorials.android.simplewizard {<br /> <br /> screen First {<br />  # textView: "This is the first screen" {}<br />  # button: "Next &gt;" to Second {}<br /> }<br /> <br /> screen Second {<br />  # textView: "And this is the second screen" {}<br />  # button: "&lt; Back" to First {}<br />  # button: "Next &gt;" to Third {}<br /> }<br /><br /> screen Third {<br />  # textView: "Now, the last one" {}<br />  # button: "&lt; Back" to Second {}<br /> }<br />}</pre><h3>Generating the code</h3><ol><li>Right-click in the .droid file</li><li>Select "Acceleo Model to Text" &gt; "Generate Android Code"</li><li>The generated code will be available at the '<i>src-gen</i>' folder and at the '<i>res</i>' folder.</li></ol>In order to run the generated application, I recommend to use an Android 2.3.3 virtual device.<br /><ol></ol></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Droid DSL]]></title>
    <link href="http://blog.reinaldojunior.net/2011/05/29/droid-dsl/"/>
    <updated>2011-05-29T00:00:00-03:00</updated>
    <id>http://blog.reinaldojunior.net/2011/05/29/droid-dsl</id>
    <content type="html"><![CDATA[<div class='post'>
The first part of <a href="http://www.google-melange.com/gsoc/project/google/gsoc2011/juniorz/10001">my GSoC project</a> is creating a DSL (<a href="http://en.wikipedia.org/wiki/Domain-specific_language">Domain Specific Language</a>) targeting the development of <a href="http://www.android.com/">Android</a> applications. The main objective is the building of a DSL which can be used as the basis to the development of the Amalgamation Tutorials (the project's final objective).<br /><br />The DSL's abstract syntax [1] (an <a href="http://wiki.eclipse.org/Ecore">Ecore</a> metamodel) was created from the definition of a concrete syntax &nbsp;(a Xtext grammar [2]). To this part, I used&nbsp;<a href="http://www.eclipse.org/Xtext/">Xtext</a>. Before that, I and my mentor had discussed about what granularity level should be used to choose what concepts should be expressed in the DSL. A too fine granularity level could lead to a very detailed DSL but would take too much time to complete, while a too coarse one could lead to an very constrained DSL (and maybe useless).<br /><a name='more'></a><br /><br />Considering this, I chose the following concepts as main concepts to the DSL:<br /><ul><li><b>Application</b> - The main concept. We're talking about Android Applications.</li><li><b>Activity</b> - Represents an application screen and the user interface displayed.</li><li><b>Layout</b> - Represents a collection of UI elements</li><li><b>Widget</b> - Represents the various UI elements</li><li><b>Resource</b> - Represents values which can be assigned to widgets properties. They have a type and can be serialized to a resource file (XML)&nbsp;</li></ul>The following example ilustrates the <a href="http://developer.android.com/resources/tutorials/hello-world.html">Hello World</a> sample application (provided by Android) written using the Droid DSL (there are more Hello World examples available [3])<br /><br /><script src="https://gist.github.com/998290.js"></script><br /><br />In order to have some direction in the creation of the tutorials, I started to create a code-generator using a Model-to-Text transformation. The transformation [4] can generate the <a href="http://developer.android.com/guide/topics/manifest/manifest-intro.html">AndroidManifest.xml</a> file that describes the application, the Activity Java class, the Layout XML file and the String resource XML file.<br />To make this I used the <a href="http://www.eclipse.org/acceleo/">Acceleo</a>.<br /><br />If you want to play with this DSL you just need to install the <a href="https://github.com/eclipse-soc/amalgamation-examples/tree/master/deploy/plugins">generated plugins</a> in your Eclipse and create a new file with the <i>.droid</i> extension.&nbsp;For more information check the <a href="https://github.com/eclipse-soc/amalgamation-examples">project repository</a> at GitHub.<br /><div style="margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;"><br /></div><b><i>References</i></b>:<br /><br /><ol><li>Harel, D., &amp; Rumpe, B. (2000). <a href="http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.10.1512">Modeling Languages: Syntax, Semantics and All That Stuff Part I: The Basic Stuff</a>. Citeseer. doi: 10.1.1.10.1512.</li><li>To more info, see:&nbsp;<a href="https://github.com/eclipse-soc/amalgamation-examples/blob/master/xtext/plugins/org.eclipse.amalgam.tutorials.xtext/src/org/eclipse/amalgam/tutorials/xtext/Droid.xtext">Droid.xtext</a></li><li>Some of the Hello Views tutorials are available:&nbsp;<a href="https://gist.github.com/998350">Relative Layout</a>&nbsp;and&nbsp;<a href="https://gist.github.com/998349">Linear Layout</a>.</li><li>Available under&nbsp;<a href="https://github.com/eclipse-soc/amalgamation-examples/tree/master/acceleo/plugins/org.eclipse.amalgam.tutorials.acceleo/src/org/eclipse/amalgam/tutorials/acceleo/files">this path</a></li></ol></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[O que é o Google Summer of Code?]]></title>
    <link href="http://blog.reinaldojunior.net/2011/04/26/o-que-e-o-google-summer-of-code/"/>
    <updated>2011-04-26T00:00:00-03:00</updated>
    <id>http://blog.reinaldojunior.net/2011/04/26/o-que-e-o-google-summer-of-code</id>
    <content type="html"><![CDATA[<div class='post'>
<blockquote>Google Summer of Code (GSoC) é um programa que oferece a desenvolvedores estudantes <a href="http://pt.wikipedia.org/wiki/Estip%C3%AAndio">estipêndios</a> para escrever código para vários projetos opensource. [<a href="http://www.google-melange.com/document/show/gsoc_program/google/gsoc2011/faqs#what_is">1</a>]</blockquote><br /><div>É comum nos Estados Unidos os estudantes aproveitarem as férias (no verão) para arrumar um emprego e pegar uma grana. O objetivo do estipêndio é motivar os alunos a não pegarem um trabalho de verão e ao invés disso colaborarem para um projeto opensource.<br /><br />Entretanto, o objetivo final é beneficiar projetos opensource, incentivar jovens desenvolvedores a participarem de desenvolvimento opensource. Os projetos saem ganhando porque tem novas funcionalidades sendo inseridas. Os estudantes saem ganhando porque ganham experiência (e dinheiro). Além disso os dados podem ser utilizados para recrutar alunos para o time do Google.<br /><br />O Google funciona como financiador dos alunos e das organizações bem como um catalisador de projetos opensource.</div><a name='more'></a><br /><h3>Como funciona o Google Summer of Code?</h3><br /><div>Uma <b>organização</b> é um grupo que está fazendo um projeto opensource. Para participar do GSoC uma organização não precisa necessariamente ser uma entidade legal (como as Foundations de Software Livre que existem). Elas apenas precisam disponibilizar software sob uma <a href="http://www.google.com/url?q=http%3A%2F%2Fwww.opensource.org%2Flicenses&amp;sa=D&amp;sntz=1&amp;usg=AFQjCNF9cc5VYE678rAcvxFhrLKX1rdOtQ">licença Open Source aprovada</a>. A cada ano o Google escolhe, dentre as organizações que se candidatarem, aquelas que irão participar do programa. Cada organização publica uma <b>lista de idéias&nbsp;</b>que é uma lista de sugestões de propostas que seriam interessantes para o projeto.</div><br /><div>Os <b>estudantes</b> enviam para as organizações suas <b>propostas</b>. Uma proposta tanto pode ser simplesmente uma idéia tirada da lista fornecida pela organização quanto uma idéia totalmente nova tirada da própria cabeça. Não precisa ser algo totalmente inovador ou revolucionário para o projeto. O mais importante é demostrar capacidade, disponibilidade, interesse e utilidade.</div><div>Cada estudante pode enviar até 20 propostas diferentes, entretanto apenas uma será aceita.<br /><br />Uma vez aceita, uma proposta deve receber um <b>mentor</b>, que é uma pessoa associada à organização e que possui capacidade de coordenar o trabalho do estudante provendo direcionamento e orientação.<br /><br />As organizações não são obrigadas a incorporar o código do estudante em seu projeto, e independente disso o estudante ainda vai receber o dinheiro.<br /><br />Toda essa mecânica Google-Organizações-Mentores-Estudantes é mediada pelo sistema do GSoC.</div><br /><h3>Avaliação</h3><div>Os estudantes serão avaliados pelos mentores que deverão preencher um formulário de avaliação (na metade e no final do programa). Da mesma forma os mentores são avaliados pelos estudantes. Os pagamentos só serão realizados mediante uma avaliação positiva.</div><br /><h3>Quanto tempo dura o programa?</h3><br /><div>Esse ano o programa vai durar aproximadamente 6 meses. Todos os anos o programa segue um cronograma semelhante a esse:</div><div><ul><li>28/Fev - 11/Mar (2 semanas)<br />Organizações se candidatam</li><li>14-18/Mar (1 semana)<br />Google escolhe as organizações e anuncia quais foram aceitas.</li><li>18-27/Mar (1 semana)<br />Estudantes discutem as idéias das organizações com as próprias organizações. Seria um periodo para amadurecer a idéia junto com a comunidade OpenSource.</li><li>28/Mar - 8/Abr (2 semanas)<br />Estudantes enviam suar propostas.</li><li>8-25 Abr (2 semanas)<br />Organizações vão receber do Google um numero máximo de estudantes que eles podem aceitar. A organização decide quais propostas vai aceitar. para isso tem que atribuir um mentor a cada proposta.</li><li>25 Abr<br />Anuncio das propostas aceitas</li><li>26/Abr - 22/Mai (4 semanas)<br />"Community Bounding". Espera-se que nesse período o aluno esteja em contato com o mentor e a comunidade para se preparar para o trabalho em equipe.</li><li>23/Mai - 15/Ago (12 semanas)<br />Estudantes trabalham em seus projetos com a orientação de seus mentores</li><li>16/Ago - 22/Ago (1 semana)<br />Estudantes já devem ter terminado suas tarefas e vão ter essa semana para polir os resultados (documentação, teste, etc)</li><li>22/Ago - 26/Ago (1 semana)<br />Mentores e organizações vão avaliar os resultados e reportar ao Google.</li><li>29/Ago<br />Anúncio final do GSoC 2011</li></ul></div><div><b>Em resumo</b>: as organizações se candidatam e são aceitas; os estudantes se candidatam e são aceitos; os estudantes trabalham sob a supervisão dos mentores; os estudantes e mentores são avaliados; os estudantes finalizam seu trabalho; e os estudantes e mentores são avaliados novamente.</div><br /><h3>E o dinheiro?</h3><div>O valor do estipêndio é de U$ 5000 para o aluno e U$ 500 para a organização.&nbsp;Os estudantes recebem o dinheiro em parcelas:</div><br /><div><ul><li>U$ 500 logo após o início do trabalho (23/Mai)</li><li>U$ 2250 se passarem na primeira avaliação (15/Jul)</li><li>U$ 2250 se passarem na avaliação final (26/Ago)</li></ul></div><h3>E a camisa?</h3><div>No final do programa se você fez tudo certinho vai receber uma camisa do GSoC para poder tirar onda, além de um certificado do Google.</div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Summer of Code 2011: Agora é pra valer]]></title>
    <link href="http://blog.reinaldojunior.net/2011/04/26/google-summer-of-code-2001-agora-e-pra/"/>
    <updated>2011-04-26T00:00:00-03:00</updated>
    <id>http://blog.reinaldojunior.net/2011/04/26/google-summer-of-code-2001-agora-e-pra</id>
    <content type="html"><![CDATA[<div class='post'>
<div>Saiu a <a href="http://google-opensource.blogspot.com/2011/04/students-announced-for-2011-google.html">lista dos 1116 estudantes</a> que tiveram seus projetos aceitos para o Google Summer of Code (GSoC) 2011. Para minha surpresa a&nbsp;<a href="http://blog.reinaldojunior.net/2011/04/proposta-para-o-google-summer-of-code.html">minha proposta</a>, que envolve o projeto <a href="http://www.eclipse.org/modeling/amalgam/">Eclipse Amalgamation</a>, foi aceita! No total foram aceitas 17 propostas para o projeto Eclipse. Em meu projeto irei trabalhar com as tecnologias de modelagem (e metamodelagem) fornecidas pelo projeto Eclipse.<br /><a name='more'></a><br />No ano passado eu não havia sido aceito. Em parte o motivo foi porque eu comi mosca e perdi o prazo. Simples assim. Me inscrevi na primeira semana mas não recebi uma resposta dos mentores envolvidos até o fim da semana seguinte. Então acreditei que eu seria notificado quando eles entrassem em contato comigo. Mas isso não aconteceu, e no penúltimo dia ví que tinha uma pergunta do mentor e acabou não dando tempo. Esse ano minha página inicial no Safari foi a minha proposta.</div><br />Não sou um <i>committer</i> de nenhum projeto opensource, tampouco sou um gênio da programação. Mesmo assim fui aceito para o programa. Então&nbsp;qual é a dica para ter seu projeto aceito? Acho que o ponto principal é ter interesse e disponibilidade, além de ter uma noa proposta. Essa era minha principal preocupação: será que minha proposta está boa? ou como saber se minha proposta é boa?<br /><br />Claro que é necessário ter um conhecimento sobre o projeto e alguma experiência vai te ajudar. Mas posso dizer que sou um exemplo de um anônimo que teve seu projeto aceito.<br /><br />Uma coisa que é essencial para ser claro em sua proposta fornecendo informações detalhadas sobre o que você pretende desenvolver. &nbsp;Você deve ser claro dizendo o que pretende fazer, como você vai fazer isso e como isso poderá ser usado. Não basta apenas dizer que vai implementar um <a href="http://dev.eclipse.org/mhonarc/lists/soc-dev/msg01607.html">recurso de digitação fácil</a> sem explicar o que é isso.<br /><br />Agora que fui aceito, começa o período chamado "<a href="http://googlesummerofcode.blogspot.com/2007/04/so-what-is-this-community-bonding-all.html">Community Bonding</a>" onde espera-se que eu conheça um pouco mais do projeto Eclipse e sobre a comunidade. Além disso esse período vai servir para que os estudantes e mentores se conheçam. Depois disso, no dia 23 de Maio, é mão na massa!<br /><br />Além disso <a href="http://dev.eclipse.org/mhonarc/lists/soc-dev/msg01603.html">é esperado (pelo menos pelo projeto Eclipse)</a> que os estudantes bloguem a respeito de seus projetos e seu progresso, além de se reportarem semanalmente na lista de discussão criada para o programa.</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Proposta para o Google Summer of Code 2011]]></title>
    <link href="http://blog.reinaldojunior.net/2011/04/05/proposta-para-o-google-summer-of-code/"/>
    <updated>2011-04-05T00:00:00-03:00</updated>
    <id>http://blog.reinaldojunior.net/2011/04/05/proposta-para-o-google-summer-of-code</id>
    <content type="html"><![CDATA[<div class='post'>
Esse ano mais uma vez estou me "<a href="http://www.google-melange.com/gsoc/proposal/review/google/gsoc2011/juniorz/1">candidatando</a>" ao Google Summer of Code.&nbsp;No ano passado eu já havia enviado uma proposta, mas perdi os prazos para responder aos mentores e não dei prosseguimento.<br /><br /><a href="http://wiki.eclipse.org/Google_Summer_of_Code_2011_Ideas#Amalgamation_-_Modeling_Example">A idéia</a> é pegar os exemplos que acompanham o livro <a href="http://www.informit.com/store/product.aspx?isbn=0321534077">Eclipse Modeling Project: A Domain-Specific Language (DSL) Toolkit</a>&nbsp;e atualizá-los para funcionar na versão mais recente das ferramentas do Eclipse que compõem o pacote Amalgamation. No fundo vou usar as ferramentas de <a href="http://en.wikipedia.org/wiki/Model-driven_architecture">MDA</a> fornecidas pelo projeto Eclipse Modeling (EMF, OCL, etc).<br /><a name='more'></a><br />A principal motivação é poder trabalhar junto com uma equipe mundial que faz opensource. Além disso como já tenho familiaridade<br /><br />Como parte do teste inicial, foi me pedido que fizesse algumas tarefas para provar minha aptidão a contribuir em um projeto opensource:<br /><br /><ol><li>Fazer um checkout do código do projeto Amalgamation</li><li>Fornecer um patch</li><li>Criar um pequeno exemplo com as ferramentas</li></ol><br /><h3>Checkout do projeto</h3>Como um bom projeto, as <a href="http://www.eclipse.org/projects/project_summary.php?projectid=modeling.amalgam">informações para contribuições</a> estão muito fáceis de encontrar. O problema é que eles ainda usam CVS e eu uso GIT. Também não foi muito difícil encontrar uma maneira de resolver esse problema e <a href="http://maymay.net/blog/2008/04/15/how-to-import-cvs-code-repositories-into-git-using-git-cvsimport/">importar o repositório CVS para o GIT</a>. O inconveniente foi a terrível demora para fazer checkout de todo o projeto - consequência de um repositório bem movimentado. Por isso escolhi só um pedaço do repositório. Para isso:<br /><blockquote><span class="Apple-style-span" style="font-family: 'Courier New', Courier, monospace;">$ git cvsimport -v -d :pserver:anonymous@dev.eclipse.org:/cvsroot/modeling org.eclipse.amalgam/docs/org.eclipse.amalgam.dsltk.doc</span></blockquote>E funcionou que é uma beleza. O objetivo da tarefa era apenas saber se eu sou capaz de fazer checkout de um repositório de código.&nbsp;Caso eu não soubesse, era só eu pesquisar, perguntar no IRC e aprender como faz.<br /><br /><h3>Fornecer um patch</h3>Mais uma vez uma tarefa com o objetivo de nivelar conhecimento/interesse. Um simples <span class="Apple-style-span" style="font-family: 'Courier New', Courier, monospace;">git diff</span> já me deu o patch.<br /><script src="https://gist.github.com/902903.js"> </script><br /><h3>Pequeno exemplo</h3>Simplesmente revisei um trabalho que eu já havia feito para a disciplina <a href="http://nemo.inf.ufes.br/jpalmeida/ensino/2011-01-mdd">MDD</a> na UFES. O <a href="http://reinaldojunior.net/pub/gsoc-2011/php_metamodel.zip">exemplo</a> é um metamodelo de um fragmento da linguagem PHP.<br /><br />Até o momento me parece que não é algo impossível ser aceito para o GSoC, a preocupação dos mentores é saber se você não é uma anta e vai ter uma mínima condição (e interesse) de levar a proposta adiante.</div>

]]></content>
  </entry>
  
</feed>
